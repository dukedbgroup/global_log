import scala.io.Source
import scala.collection.mutable.MutableList
import java.io._
import scala.util.control.Exception.allCatch
import scala.collection.immutable.ListMap

/**
 * @author yuzhanghan1982
 */
object GCLogAnalyzer {

  def isLongNumber(s: String): Boolean = (allCatch opt s.toLong).isDefined

  var executionTime: Double = 0
  var progressionTime: Double = 0
  var collectionTime: Double = 0

  def main(args: Array[String]) {

    if (args.length != 4) {
      println("Usage:\nscala GCLogAnalyzer <String: application id> <Int: executor id> <String: subfolder name> <Float: executiong time of application>")
      println("Sample:\nscala GCLogAnalyzer application_1444589741695_0046 1 test61 2.3")
      return
    }

    //        args(0) = "application_1444589741695_0046"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.3"
    //        args(0) = "application_1444589741695_0054"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.6"
    //        args(0) = "application_1444843842767_0022"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.8"
    //        args(0) = "application_1444843842767_0028"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.1"
    //        args(0) = "application_1444843842767_0034"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.9"
    //        args(0) = "application_1444929280095_0012"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "2.2"
    //        args(0) = "application_1444929280095_0015"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "11"
    //        args(0) = "application_1444929280095_0017"
    //        args(1) = "1"
    //        args(2) = "test61"
    //        args(3) = "13"
    //    args(0) = "application_1444929280095_0020"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "9.6"
    //    args(0) = "application_1445122843820_0005"
    //    args(1) = "2"
    //    args(2) = "test61"
    //    args(3) = "2.5"
    //    args(0) = "application_1445122843820_0011"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "7.9"
    //            args(0) = "application_1445122843820_0016"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "8.6"
    //                args(0) = "application_1445194429503_0005"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "9.7"
    //    args(0) = "application_1445194429503_0009"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "11.0"
    //    args(0) = "application_1445194429503_0011"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "5.5"
    //    args(0) = "application_1445194429503_0013"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "6.9"
    //    args(0) = "application_1445194429503_0015"
    //    args(1) = "1"
    //    args(2) = "test61"
    //    args(3) = "5.2"
    /*
    args(0) = "application_1445194429503_0017"
    args(1) = "1"
    args(2) = "test61"
    args(3) = "5.1"
    */

    getGCStatistics(args)
    getGeneratedHeapDataSize(args)
  }

  def getGCStatistics(args: Array[String]) {

    println("Application:\t\t\t" + args(0))
    println("Executor:\t\t\t" + args(1))

    var filename: String = null
    
    // han
    //adapt this to the path you store the driver and worker output folder generated by my memory profiler
    filename = "/home/yuzhanghan1982/2015summer/results/" + args(2) + "/" + args(0) + "/" + args(1) + "/stdout"

    //   [Eden: 282.0M(282.0M)->0.0B(282.0M) Survivors: 24.0M->24.0M Heap: 492.0M(6144.0M)->218.0M(6144.0M)]
    executionTime = args(3).toDouble * 60
    println("Execution time:\t" + executionTime + " sec")

    var fraction: Double = 0
    var lines_list: List[String] = Source.fromFile(new File(filename)).getLines().filter(l => l.startsWith("   [Eden:") || l.startsWith(" [Times: ")).toList
    var lines_iterator = lines_list.iterator
    var totalTime: Double = 0
    var avgTime: Double = 0
    var numberOfGCs: Int = 0
    var totalSize: Double = 0
    var avgSize: Double = 0

    var line: String = null
    while (lines_iterator.hasNext == true) {
      line = lines_iterator.next()
      if (line.startsWith("   [Eden:")) {
        numberOfGCs += 1
        val tokens = line.split("\\s+").iterator
        while (tokens.hasNext) {
          if (tokens.next() == "Heap:") {
            //            println(tokens.next())
            var t1 = tokens.next().split("M|\\(|\\)|->|\\]").filter(t => t.length > 0).toArray
            totalSize += t1(0).toDouble - t1(2).toDouble
            /*
            t1.foreach {
              t =>
                print(t + "\t")
            }
            println(totalSize)
            */
          }
        }
        val nextLine = lines_iterator.next()
        val t = nextLine.split("\\s+").filter(token => token.startsWith("real="))(0)
        val value = t.substring(t.indexOf('=') + 1).toDouble
        totalTime += value
      }
    }
    avgTime = totalTime / numberOfGCs
    println("-------- Young GC --------")
    println("Number of Young GCs:\t\t" + numberOfGCs)
    println("Total pause of Young GCs:\t" + totalTime + " sec")
    println("Average pause of Young GCs:\t" + avgTime + " sec")
    fraction = totalTime / executionTime
    println("Fraction of Young GCs:\t\t" + fraction)
    avgSize = totalSize / numberOfGCs
    println("Total size of Young GCs:\t" + totalSize + " MB")
    println("Average size of Young GCs:\t" + avgSize + " MB")

    collectionTime += totalTime

    //[GC cleanup 1116M->879M(6144M), 0.0054560 secs]
    fraction = 0
    totalTime = 0
    avgTime = 0
    numberOfGCs = 0
    totalSize = 0
    avgSize = 0

    Source.fromFile(new File(filename)).getLines().filter(l => l.contains("[GC cleanup")).foreach {
      l =>
        numberOfGCs += 1
        l.split("\\s").filter(token => token.contains("->")).foreach {
          t =>
            var t1 = t.split("M|\\(|\\)|->|\\]").filter(t => t.length > 0).toArray
            totalSize += t1(0).toDouble - t1(1).toDouble
          //            println(t + " " + t1(0).toDouble - t1(1).toDouble)
        }
        val t2 = l.split("\\s").toArray
        totalTime += t2(t2.indexOf("secs]") - 1).toDouble
    }
    avgTime = totalTime / numberOfGCs
    println("-------- cleanups --------")
    println("Number of cleanups:\t\t" + numberOfGCs)
    println("Total pause of cleanups:\t" + totalTime + " sec")
    println("Average pause of cleanups:\t" + avgTime + " sec")
    fraction = totalTime / executionTime
    println("Fraction of cleanups:\t\t" + fraction)
    avgSize = totalSize / numberOfGCs
    println("Total size of cleanups:\t\t" + totalSize + " MB")
    println("Average size of cleanups:\t" + avgSize + " MB")

    collectionTime += totalTime

    //2015-10-15T19:39:53.683+0000: 616.458: [Full GC2015-10-15T19:39:54.023+0000: 616.798: [SoftReference, 1098 refs, 0.0001570 secs]2015-10-15T19:39:54.023+0000: 616.798: [WeakReference, 558 refs, 0.0000540 secs]2015-10-15T19:39:54.023+0000: 616.798: [FinalReference, 108 refs, 0.0000610 secs]2015-10-15T19:39:54.023+0000: 616.798: [PhantomReference, 5 refs, 39 refs, 0.0000170 secs]2015-10-15T19:39:54.023+0000: 616.798: [JNI Weak Reference, 0.0000100 secs] 5673M->517M(6144M), 2.3053630 secs]
    fraction = 0
    totalTime = 0
    avgTime = 0
    numberOfGCs = 0
    totalSize = 0
    avgSize = 0

    Source.fromFile(new File(filename)).getLines().filter(l => l.contains("[Full GC")).foreach {
      l =>
        numberOfGCs += 1
        l.split("\\s").filter(token => token.contains("->")).foreach {
          t =>
            var t1 = t.split("M|\\(|\\)|->|\\]").filter(t => t.length > 0).toArray
            totalSize += t1(0).toDouble - t1(1).toDouble
            val d = t1(0).toDouble - t1(1).toDouble
            println(t + " " + d)
        }
        val t2 = l.split("\\s").toArray
        totalTime += t2(t2.lastIndexOf("secs]") - 1).toDouble
    }
    avgTime = totalTime / numberOfGCs
    println("-------- Full GCs --------")
    println("Number of full GCs:\t\t" + numberOfGCs)
    println("Total pause of full GCs:\t" + totalTime + " sec")
    println("Average pause of full GCs:\t" + avgTime + " sec")
    fraction = totalTime / executionTime
    println("Fraction of full GCs:\t\t" + fraction)
    avgSize = totalSize / numberOfGCs
    println("Total size of full GCs:\t\t" + totalSize + " MB")
    println("Average size of full GCs:\t" + avgSize + " MB")

    collectionTime += totalTime
    progressionTime = executionTime - collectionTime
  }

  def getGeneratedHeapDataSize(args: Array[String]) {
    var usedHeap_old: Long = 0
    var generatedHeapDataSize: Long = 0
    var collectedHeapDataSize: Long = 0

    var filename: String = null
    filename = "/home/yuzhanghan1982/2015summer/results/" + args(2) + "/" + args(0) + "/" + args(1) + "/sparkOutput_worker_" + args(0) + "_" + args(1) + ".txt"
    Source.fromFile(new File(filename)).getLines().filter(l => l.contains("application") == false && l.contains("Old") == false).foreach {
      l =>
        val usedHeap = l.split("\\t")(5).toLong
        if (usedHeap > usedHeap_old) {
          generatedHeapDataSize += usedHeap - usedHeap_old
        } else if (usedHeap < usedHeap_old) {
          collectedHeapDataSize += usedHeap_old - usedHeap
        }
        if (usedHeap != usedHeap_old) {
          usedHeap_old = usedHeap
        }
    }

    println("-------- Data --------")
    println("Generated data in heap:\t\t" + generatedHeapDataSize / 1000000 + " MB")
    println("Progression time:\t\t" + progressionTime + " sec")
    println("Data generation rate:\t\t" + generatedHeapDataSize / 1000000 / progressionTime + " MB/sec")
    println("Collected data in heap:\t\t" + collectedHeapDataSize / 1000000 + " MB")
    println("Collection time:\t\t" + collectionTime + " sec")
    println("Data collection rate:\t\t" + collectedHeapDataSize / 1000000 / collectionTime + " MB/sec")
    println("Remaining data in heap:\t\t" + (generatedHeapDataSize - collectedHeapDataSize) / 1000000 + " MB")
  }
}